<html>
<link type="text/css" rel="stylesheet" href="webcgh-help.css">
<body>
<h1 align="center" class="docTitle">WebGenome Help</h1>
<h2 class="heading1">Table of Contents</h2>
<a href="#overview">1 - WebGenome Version 2.3 Overview</a>
<br>
<a href="#cart">2 - Shopping Cart</a>
<br>
<a href="#plots">3 - Plots</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#plotParams">3.1 - Plotting Parameters</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#commonPlotParameters">3.1.1 - Common Plot Paremeters</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#scatterPlotParameters">3.1.2 - Scatter Plot Parameters</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ideogramPlotParameters">3.1.3 - Ideogram Plot Parameters</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#plotTypes">3.2 - Plot Types</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#scatterPlot">3.2.1 - Scatter Plot</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ideogramPlot">3.2.2 - Ideogram Plot</a>
<br>
<a href="#pipelines">4 - Analytic Pipelines</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#pipelines-manage">4.1 - Managing Analytic Pipelines</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#pipelines-new">4.2 - Creating/Editing Analytic Pipelines</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#filtering">4.2.1 - Data Filtering Operations</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#normalization">4.2.2 - Data Normalization Operations</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#aggregateStatistics">4.2.3 - Aggregate Statistical Functions</a>
<br>
<p>
<br>
</p>
<p>
<br>
</p>
<a name="overview"></a><span class="heading1">1 - WebGenome Version 2.3 Overview</span>
<br>
<p>
		
<p>
			WebGenome is a web-based application for
			creating genomics plots of array-based data
			and genomic annotation.  This version provides a client
			plotting service to external applications, such as
			Rembrandt.  Users must enter webGenome through redirection
			from another application; the only way to load data is
			by selecting it in the application client.
		</p>
		
		
<p>
			Data types supported in this version include
			copy number (i.e., aCGH), loss of heterozygosity (LOH),
			and gene expression.  Two basic types of plots
			can be generated:
		</p>
		
		
<ul>
<a name=""></a>
<li>
<a href="#scatterPlot">Scatter Plots</a> -
					
				Plots DNA copy number measurements
				across the genome, chromosome, or chromosomal interval.
			</li>
<a name=""></a>
<li>
<a href="#ideogramPlot">Ideogram Plot</a> -
					
				Shows chromosomal amplifications
				and deletions in relation to cytogenetic chromosome ideograms.
			</li>
</ul>
		
		
<p>
			The underlying data model used by webGenome is a very simplied version of
			the MAGE-OM.  The most important concept for the use of the system
			is that individual array data sets, called <em>bioassays</em> are aggregated
			into experiments.
		</p>
	
</p>
<a name="cart"></a><span class="heading1">2 - Shopping Cart</span>
<br>
<p>
		
<p>
			The shopping cart accumulates raw data sets loaded by the client
			application, statistically processed data sets derived from
			raw or other processed data, and plots generated.  For
			each experiment, the list of nested bioassays is also shown.
			Users may change the names of experiments and bioassays in this
			screen.  Names do not have to be unique and can be empty
			if desired.  Users may delete experiments and plots.
		</p>
		
		
<p>
			Each bioassay has an associated color.  These colors are
			used in scatter plots to distinguish between bioassays.
			Colors are initialized by the system.  Users may change
			colors and all future plots will use the new colors.  However,
			previously-generated plots in the cart will retain the original
			colors.
		</p>
		
		
<p>
			From the shopping cart users may select one or more experiments
			and generate new plots or perform analytic operations.  New plots
			and statistically processed experiments are saved back into the
			cart.
		</p>
	
</p>
<a name="plots"></a><span class="heading1">3 - Plots</span>
<br>
<p>
		
		
		
		
		
		
		

	
</p>
<a name="plotParams"></a><span class="heading2">3.1 - Plotting Parameters</span>
<br>
<p>
			Plotting parameters control how data will be presented graphically.
			There are parameters that are common to all plot types,
			such as genome intervals, and parameters specific to one
			type of plot.  After the user elects to create a new plot
			from the shopping cart, a form showing parameters for
			the selected plot type is displayed.  The user may
			later change these parameter settings by clicking on
			a link above displayed plots.  Descriptions of the
			various parameters are given here.

			
			
			
			
			
		</p>
<a name="commonPlotParameters"></a><span class="heading3">3.1.1 - Common Plot Paremeters</span>
<br>
<p>
				These parameters are common to all plots.
				<ul>
<a name="param-plotName"></a>
<li>
<span class="propName">Plot name</span> -
					
						This parameter enables the user to name the plot.
						This name need not be unique and can be changed
						at any time with no harm.
					</li>
<a name="param-genomeIntervals"></a>
<li>
<span class="propName">Genome intervals</span> -
					
						This parameter constrains the genome interval that will
						be displayed in plots.  Genome segments should be specified in the
						following format: CHROMOSOME[:FROM-TO][,CHROMOSOME[:FROM-TO]]*
						
						<p>
<b>Examples</b>
</p>
						
						
<p>
							3:40000-50000<br>
							3,5:140000-160000<br>
							1,2<br>
							1:5000-7000,2:30000-100000
						</p>
					
</li>
<a name="param-numPlotPerRow"></a>
<li>
<span class="propName">Number of plot per row</span> -
					
						When the user specifies multiple genome intervals,
						they will be displayed in different plots,
						which will be laid out in rows.  This parameter
						specifies how many plots will be in a row.
					</li>
</ul>
			
</p>
<a name="scatterPlotParameters"></a><span class="heading3">3.1.2 - Scatter Plot Parameters</span>
<br>
<p>
				The following parameters are specific to scatter plots.
				<ul>
<a name="param-lohThreshold"></a>
<li>
<span class="propName">LOH probability threshold</span> -
					
						Loss of heterozygosity (LOH) data may be expressed
						as probability of LOH.  This parameter is a threshold,
						above which probabilities will be interpred as
						indicative of LOH.
					</li>
<a name="param-interpolateLohEndpoints"></a>
<li>
<span class="propName">Interpoloate LOH endpoints</span> -
					
						This parameter is only applicable if the data are
						LOH (loss of heterozygosity).  Scatter plots of
						LOH indicate LOH regions as thick horizontal
						lines.  If for two adjacent reporters one is measuring LOH
						and the other is not, the location where the
						transition occurs cannot be known.  If this parameter
						is checked, the system will interpolate the
						LOH endpoint using the slope of a straight line
						between data points corresponding to the two reporters.
						If unchecked, the endpoint will be at the LOH reporter.
					</li>
<a name="param-drawRawLohProbabilities"></a>
<li>
<span class="propName">Include raw LOH probabilities</span> -
					
						This parameter is only applicable if the data are
						LOH (loss of heterozygosity).  Scatter plots of
						LOH indicate LOH regions as thick horizontal
						lines.  If this parameter is checked, then the underlying
						raw LOH probabilites are also plotted.
					</li>
<a name="param-minY"></a>
<li>
<span class="propName">Minimum plot value</span> -
					
						This sets the minimum value on the scatter plot Y-axis.
					</li>
<a name="param-maxY"></a>
<li>
<span class="propName">Maximum plot value</span> -
					
						This sets the maximum value on the scatter plot Y-axis.
					</li>
<a name="param-width"></a>
<li>
<span class="propName">Plot width in pixels</span> -
					
						This sets the width of each individual scatter plot
						in pixels.  If multiple genome intervals are selected,
						the this propery applies to each of the corresponding
						plots.
					</li>
<a name="param-height"></a>
<li>
<span class="propName">Plot height in pixels</span> -
					
						This sets the height of each individual scatter plot
						in pixels.  If multiple genome intervals are selected,
						the this propery applies to each of the corresponding
						plots.
					</li>
<a name="param-drawHorizGridLines"></a>
<li>
<span class="propName">Draw horizontal grid lines</span> -
					
						If checked, horizontal grid lines emenating from
						the major tic marks on the Y-axis will be drawn across
						scatter plot.  
					</li>
<a name="param-drawVertGridLines"></a>
<li>
<span class="propName">Draw vertical grid lines</span> -
					
						If checked, vertical grid lines emenating from
						the major tic marks on the X-axis will be drawn across
						scatter plot. 
					</li>
<a name="param-drawPoints"></a>
<li>
<span class="propName">Draw points</span> -
					
						If checked, indivdual data points will be painted for
						each datum.
					</li>
<a name="param-drawErrorBars"></a>
<li>
<span class="propName">Draw error bars if plotting means</span> -
					
						The averaging analytic operation also calculates
						standard error values.  If plotting averages in
						a scatter plot, if this is checked then error
						bars will be painted for each data point.
					</li>
<a name="param-drawLines"></a>
<li>
<span class="propName">Draw regression lines</span> -
					
						If checked, "regression lines" connecting adjacent
						data points will be painted.
					</li>
</ul>
			
</p>
<a name="ideogramPlotParameters"></a><span class="heading3">3.1.3 - Ideogram Plot Parameters</span>
<br>
<p>
				The following parameters are specific to ideogram plots.
				<ul>
<a name="param-ideogramSize"></a>
<li>
<span class="propName">Ideogram size</span> -
					
						This enables the user to set the relative height
						of chromosome ideograms.
					</li>
<a name="param-ideogramThickness"></a>
<li>
<span class="propName">Ideogram width</span> -
					
						This specifies the width of chromosome ideograms
						in pixels.
					</li>
<a name="param-trackWidth"></a>
<li>
<span class="propName">Data track width</span> -
					
						This specifies the width of data tracks in pixels.
					</li>
<a name="param-minMask"></a>
<li>
<span class="propName">Minimum data mask value</span> -
					
						Background data values within a
						range (e.g., -0.2 and 0.3) can be masked
						so that only regions of significant
						magnitudes are colored.  This parameter is the
						the lower end of this range.
					</li>
<a name="param-maxMask"></a>
<li>
<span class="propName">Maximum data mask value</span> -
					
						Background data values within a
						range (e.g., -0.2 and 0.3) can be masked
						so that only regions of significant
						magnitudes are colored.  This parameter is the
						the upper end of this range.
					</li>
<a name="param-minSaturation"></a>
<li>
<span class="propName">Minimum saturation value</span> -
					
						Data tracks color code measured values (e.g. copy number)
						from green to blue to red.  These colors correspond to
						low, medium, and high values, respectively.  The saturation
						values indicate which values are mapped to pure green
						or red.  Values below and above the saturation points
						are mapped to pure green and red, respectively.
						This parameter is for the lower saturation value.
					</li>
<a name="param-maxSaturation"></a>
<li>
<span class="propName">Maximum saturation value</span> -
					
						Data tracks color code measured values (e.g. copy number)
						from green to blue to red.  These colors correspond to
						low, medium, and high values, respectively.  The saturation
						values indicate which values are mapped to pure green
						or red.  Values below and above the saturation points
						are mapped to pure green and red, respectively.
						This parameter is for the upper saturation value.
					</li>
</ul>
			
</p>
<a name="plotTypes"></a><span class="heading2">3.2 - Plot Types</span>
<br>
<p>
		
			
			
			
			
			
			
		
</p>
<a name="scatterPlot"></a><span class="heading3">3.2.1 - Scatter Plot</span>
<br>
<p>
				Scatter plots display array reporter values (e.g. fold changes) against physical genome location.
				Users can view data at arbitrary resolutions from the entire genome on down.
				Both CGH and gene expression data can be co-visualized in this plot.  When moving
				the mouse over specific probes the system provides mouse-over probe names.
				Clicking on the name of an experiment or bioassay in the plot legend will
				highlight the corresponding data.
			</p>
<a name="ideogramPlot"></a><span class="heading3">3.2.2 - Ideogram Plot</span>
<br>
<p>
				This plot shows color-coded data values in relation to chromosome ideograms.
			</p>
<a name="pipelines"></a><span class="heading1">4 - Analytic Pipelines</span>
<br>
<p>
		When a user creates a plot webGGH may first
		invoke an <em>analytic pipeline</em> on data.  An analytic pipeline
		is a sequence of analytical operations that may filter, normalize, or
		compute aggregate statistics on data.  The system comes pre-loaded
		with default pipelines.  Additionally the user may create custom
		analytic pipelines which are persisted and available each time
		they log into the system.  Users
		specify which pipeline is invoked through the <a href="#plotParams">
		plot parameters</a> screen.  Here we describe how custom analytic pipelines
		are managed and created.
		
		
		
		
		
		
	</p>
<a name="pipelines-manage"></a><span class="heading2">4.1 - Managing Analytic Pipelines</span>
<br>
<p>
			
<p>
				For basic information on analytic pipelines see the section
				on <a href="#pipelines">Analytic Pipelines</a>
			
</p>
			
<p>
				This screen allows the user to manage their analytic pipelines.
				The user can delete or edit existing pipelines with the exception
				of pre-configured pipelines.  The system will prompt the user if the
				a delete link is clicked to ensure that pipelines will not
				be inadventantly deleted.
			</p>
		
</p>
<a name="pipelines-new"></a><span class="heading2">4.2 - Creating/Editing Analytic Pipelines</span>
<br>
<p>
			
<p>
				For basic information on analytic pipelines see the section
				on <a href="#pipelines">Analytic Pipelines</a>
			
</p>
			
<p>
				This screen allows the user to create a new pipeline or edit an
				existing pipeline.  The user can select a name for the pipeline
				and create sequences of analytic operations.  Analytic operations
				are of three basic types: 1) data filtering, 2) data normalization,
				and 3) aggregate statistical functions.  Available operations are
				described in the following subsections.
			</p>
			
			
			
			
			
			
			
		
</p>
<a name="filtering"></a><span class="heading3">4.2.1 - Data Filtering Operations</span>
<br>
<p>
				
<ul>
<a name="filterWithinRange"></a>
<li>
<span class="propName">Filter within range</span> -
					
						The user species a <em>lower boundary</em> and an
						<em>upper boundary</em> for a range of values.  The
						system filters out all probe values within the specified
						range.  The user may specify any real number for the
						boundaries including -INFINITY and INFINITY.  For plotting
						CGH data it is recommended
						that this filter only be used for removing outliers.  The
						intensities (e.g. fold change, copy number, etc.) will be
						interpolated for regions where probes have been filtered out.
						To mask insignificant regions of copy number change from ideogram and
						annotation plots, set the <a href="#param-threshold">Data Mask</a>
						parameter.
					</li>
</ul>
			
</p>
<a name="normalization"></a><span class="heading3">4.2.2 - Data Normalization Operations</span>
<br>
<p>
				
<ul>
<a name="simpleArrayNormalization"></a>
<li>
<span class="propName">Simple array-based normalization</span> -
					
						This procedure subtracts the array specific mean or median from each observation. 
						The user specifies the use of the mean or median as the normalization factor. 
						The choice of median based normalization allows the user to lessen the effect of outliers. 
						This type of normalization is useful for making spot intensities comparable across arrays 
						as it removes an overall array effect; each array will be "centered" on zero (or something 
						close to it if the median is used). 
					</li>
<a name="simpleExperimentNormalization"></a>
<li>
<span class="propName">Simple experiment-based normalization</span> -
					
						This procedure subtracts the array specific mean or median from each observation then 
						adds the experiment level mean or median back to each observation. The user specifies 
						the use of the mean or median as the normalization factor. The choice of median based 
						normalization allows the user to lessen the effect of outliers. This type of normalization 
						is useful for making spot intensities comparable across arrays while preserving any overall 
						difference due to treatment effect. This will center each array on the difference between 
						it's own array mean/median and the experiment wide mean/median. 
					</li>
<a name="simpleSmoothing"></a>
<li>
<span class="propName">Simple smoothing</span> -
					
						This operation smooths data using a "sliding window" approach.  The user
						specified a <em>Window size</em>.  The value of probe <em>i</em>
						is equal to the average value of probes <em>i - w/2</em> through 
						<em>i + w/2</em>, where <em>w</em> is the size of the window.
					</li>
<a name="linearRegression"></a>
<li>
<span class="propName">Linear regression</span> -
					
						The effect of linear regression based normalization is similar to that of the simple 
						normalization array operation. This procedure uses linear regression to subtract the 
						array specific mean from each observation, allowing the user to make spot intensities 
						comparable across arrays.  The regression model treats each array as a separate value 
						in a class variable and adjusts accordingly. Requires: at least 2 experiments with at 
						least one array each. 
					</li>
<a name="loess"></a>
<li>
<span class="propName">Local (i.e. non-linear or LOESS) regression</span> -
					
						A data smoothing technique that utilizes regression to reduce "noise", bringing individual 
						data points into line with neighboring points. Each point is placed into a local neighborhood 
						of surrounding points (based on distance) the size of which, referred to as &ldquo;percentage of data&rdquo;, 
						is specified by the researcher. For each point, a weighted regression is then performed such 
						that near points have greater influence (weights) than further points. The residual of this 
						regression is used as the normalized or smoothed value, and the process is repeated for each
						 point in the data set. Note that the larger the percentage of the data in the local neighborhood, 
						 the more intense the smoothing effect will be. For our purposes, the following weight function is 
						 used for the regression:  W(x) = (1-|d/D|^3)^3, where x = a given point in the neighborhood, 
						 d = distance to the point of interest, and D = maximum distance to the point of interest 
						 in the local neighborhood.
					</li>
</ul>
			
</p>
<a name="aggregateStatistics"></a><span class="heading3">4.2.3 - Aggregate Statistical Functions</span>
<br>
<p>
				Aggregate statistical functions aggregate data with experiments and create summary statistics
				on a probe-by-props (i.e. reporter-by-reporter) basis.
				<ul>
<a name="averageOperation"></a>
<li>
<span class="propName">Average</span> -
					
						This function computes the average and standard error of probes with experiments.
					</li>
</ul>
			
</p>
</body>
</html>
