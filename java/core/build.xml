<?xml version="1.0" ?>

<!--L
   Copyright RTI International

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/webgenome/LICENSE.txt for details.
L-->

<project name="webgenome-core" default="usage">
	
<!-- Description -->
	<description>
		This file builds the core WebGenome module
		common to application server and analytic server
		applications.  This file should not be invoked on its own through
		ant, e.g., by calling ant in this directory.
		Rather, it is intented to be invoked by a calling
		build script, which passes in a number of required
		properties.
	</description>
	
	<!-- ======================================= -->
	<!--        CONFIGURABLE PROPERTIES          -->
	<!-- ======================================= -->
	
	<!-- ================= Source directories ============= -->
	<!-- Source directory for JUnit test classes -->
	<property name="core.junit.src.dir" location="${core.home.dir}/junit"/>
	
	<!-- ================= Class directories ============== -->
	
	<!-- Directory that will contain compiled business class files -->
	<property name="core.classes.dir" location="${core.build.dir}/classes"/>
	
	<!-- Directory that will contain compiled JUnit class files -->
	<property name="core.junit.classes.dir"
		location="${core.build.dir}/junit-classes"/>
	
	<!-- ================ Classpaths ==================== -->
	
	<!-- Classpath for compiling business class sources -->
	<path id="class.path">
		<fileset dir="${lib.dir}" includes="*.*"/>
	</path>
	
	<!-- Classpath for compiling JUnit sources -->
	<path id="junit.class.path">
		<fileset dir="${lib.dir}" includes="*.*"/>
		<pathelement location="${core.classes.dir}"/>
		<pathelement location="${core.junit.classes.dir}"/>
	</path>
	
	<!-- ======================================= -->
	<!--             TARGETS                     -->
	<!-- ======================================= -->
	
<!-- Print usage statement -->
	<target name="usage" description="Print usage statement">
		<echo level="error" message="This build script is meant to be invoked from a parent script."/>
		<echo level="error" message="It should not be invoked on its own."/>
	</target>
	<target name="help" depends="usage"/>
	
<!-- Setup -->
	<target name="setup" description="Create and initialize build directories">
		<echo level="info" message="Creating build directories"/>
		<mkdir dir="${core.classes.dir}"/>
		<mkdir dir="${core.junit.classes.dir}"/>
		<copy todir="${core.classes.dir}">
			<fileset dir="${core.src.dir}">
				<include name="*.properties"/>
				<include name="*.R"/>
				<include name="*.policy"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<copy todir="${core.junit.classes.dir}">
			<fileset dir="${core.junit.src.dir}" includes="**/*.csv"/>
			<fileset dir="${core.junit.src.dir}" includes="**/*.txt"/>
			<fileset dir="${core.junit.src.dir}" includes="**/*.properties"/>
			<fileset dir="${core.junit.src.dir}" includes="**/*.xml"/>
		</copy>
	</target>
	
<!-- Compile sources -->
	<target name="compile" depends="setup" description="Compile Java classes">
		<echo level="info" message="Compiling sources"/>
		<javac srcdir="${core.src.dir}" destdir="${core.classes.dir}"
			classpathref="class.path" debug="true"/>
		
		
		<!-- Copy sources to compile directory for debugging -->
		<!-- Commented out b/c unnecessary
		<copy todir="${core.classes.dir}">
			<fileset dir="${core.src.dir}" includes="**/*.java"/>
		</copy>
		-->
	</target>
	
<!-- Compile JUnit test classes -->
	<target name="compile-junit" depends="compile"
		description="Compile JUnit test classes">
		<echo level="info" message="Compiling test classes"/>
		<javac srcdir="${core.junit.src.dir}" destdir="${core.junit.classes.dir}"
			classpathref="junit.class.path" debug="false"/>
	</target>
	
<!-- Run JUnit tests -->
	<target name="run-tests" depends="compile,compile-junit"
		description="Run all JUnit test cases">
		<echo level="info" message="Running test cases"/>
		<junit failureproperty="core.junit.failure">
			<classpath>
				<path refid="junit.class.path"/>
			</classpath>
			<formatter type="xml"/>
			<batchtest todir="${junit.output.dir}">
				<fileset dir="${core.junit.classes.dir}" includes="**/*Tester.class"/>
			</batchtest>
		</junit>
	</target>
		
<!-- Take actions if any tests fail -->
	<target name="check-test-failure" depends="run-tests"
		if="core.junit.failure"
		description="Take actions if any tests fail">
		
		<!-- Below code commented out because of current inability
		to get <mail> tag working with RTI SMPT server propertly -->
		<mail from="${NOTIFICATION.FROM}"
			tolist="${NOTIFICATION.RECIPIENT.LIST}"
			subject="${NOTIFICATION.TEST.FAILURE.SUBJECT}"
			mailhost="${NOTIFICATION.SMTP.HOST}"
			messagemimetype="text/plain"
			encoding="plain">
			<message>
One or more unit tests failed during build on ${build.time}
			</message>
		</mail>
		
		<fail/>
	</target>
	
<!-- Create JAR in build directory -->
	<target name="jar" depends="compile"
		description="Product distributable JAR file">
		<echo level="info" message="Building distributable JAR"/>
		<jar destfile="${build.lib.dir}/${core.jar.file.name}"
			basedir="${core.classes.dir}"/>
	</target>
	
<!-- Build distributable JAR file in distribution
directory.  This target may be called
from another ant script. -->
	<target name="dist" depends="run-tests,check-test-failure,jar"
		description="Copying JAR to distribution directory.">
		<echo level="info" message="Copying JAR to distribution directory"/>
		<copy file="${build.lib.dir}/${core.jar.file.name}"
			todir="${dist.dir}"/>
	</target>
	
<!-- Build distributable JAR file in distribution
directory without first executing
unit tests.  This target may be called
from another ant script. -->
	<target name="dist-no-tests" depends="jar"
		description="Copying JAR to distribution directory.">
		<echo level="info" message="Copying JAR to distribution directory"/>
		<copy file="${build.lib.dir}/${core.jar.file.name}"
			todir="${dist.dir}"/>
	</target>
</project>