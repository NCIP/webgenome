<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20000303 Stylable//EN"
	"svg11-flat-20030114.dtd">
<svg xmlns="http://www.w3.org/2000/svg" onload="init(evt);">

	<script id="declarations" type="text/ecmascript"/>

	<script type="text/ecmascript">
		<![CDATA[
			var highlightedData = null;
			var svgDoc;
			var underMouseText;
			var dragging = false;
			var selectionObj;
			var startX = -1;
			var startY = -1;
			var lastX = -1;
			var lastY = -1;

			// Initialization function
			function init(evt) {
			
				// Make SVG functions visible to web page
				parent.highlight = highlight;
				parent.noHighlight = noHighlight;
				parent.setVisible = setVisible;
				parent.showErrorBars = showErrorBars;
				parent.showPoints = showPoints;
				parent.showLines = showLines;
				parent.hideSelectBox = hideSelectBox;
				parent.setSelectBox = setSelectBox;
				
				// Initialize variables
				svgDoc = evt.getTarget().getOwnerDocument();
				selectionObj = svgDoc.getElementById("selection");
			}

			// Highlight a data set
			function highlight(id) {
			
				// Un-highlight currently highlighted data set
				if (highlightedData != null)
					highlightedData.setAttribute("stroke-width", "1");
					
				// Highlight data set
				var data = svgDoc.getElementById(id);
				highlightedData = data;
				data.setAttribute("stroke-width", "3");
				
				// Move data set to front
				promote(id);
			}


			// Remove all highlighting
			function noHighlight() {
				if (highlightedData != null) {
					highlightedData.setAttribute("stroke-width", "1");
					highlightedId = null;
				}
			}
			
			
			// Move data set to front of plot
			function promote(id) {
				var data = svgDoc.getElementById(id);
				var parentElmt = data.parentNode;
				parentElmt.removeChild(data);
				parentElmt.appendChild(data);
			}


			// Make a data set visible or invisible
			function setVisible(id, visible) {
				var data = svgDoc.getElementById(id);
				var visibility = (visible)? "visible" : "hidden";
				data.setAttribute("visibility", visibility);
			}
			
			
			// Show element class
			function showElementClass(prefix, visible) {
				var visibility = (visible)? "visible" : "hidden";
				for (i = 0; i < experimentNames.length; i++) {
					var expName = experimentNames[i];
					var elmt = svgDoc.getElementById(prefix + expName);
					if (elmt != null)
						elmt.setAttribute("visibility", visibility);
				}			
			}


			// Show error bars
			function showErrorBars(visible) {
				showElementClass("errorBars-", visible);
			}


			// Show data points
			function showPoints(visible) {
				showElementClass("points-", visible);
			}
			
			// Show lines
			function showLines(visible) {
				showElementClass("line-", visible);
			}


			// Convert pixel x-coordinate to x-axis value
			function toXDataScale(xVal) {
				return parseInt(minDataX + (xVal - minPixelXInPlot) * pixelsToXUnits);
			}

			// Convert pixel y-coordinate to y-axis value
			function toYDataScale(yVal) {
				return minDataY + (maxPixelYInPlot - yVal) * pixelsToYUnits;
			}

			// Convert x-axis value to pixel x-coordinate
			function toXPixelScale(xVal) {
				return minPixelXInPlot + (xVal - minDataX) / pixelsToXUnits;
			}

			// Convert y-axis value to pixel y-coordinate
			function toYPixelScale(yVal) {
				return maxPixelYInPlot - (yVal - minDataY) / pixelsToYUnits
			}

			// Set plot parameters in parent HTML form
			function setFormValues(x1, x2, y1, y2) {
				if (x1 > x2) {
					var temp = x1;
					x1 = x2;
					x2 = temp;
				}
				if (y1 < y2) {
					var temp = y1;
					y1 = y2;
					y2 = temp;
				}
				parent.setFormValues(toXDataScale(x1), toXDataScale(x2), toYDataScale(y1), toYDataScale(y2));
			}

			// Set state variables associated with dragging the cursor
			// over the plot
			function toggleDragState(evt) {
				dragging = !dragging;
				if (dragging) {
					var xcoord = evt.getClientX();
					var ycoord = evt.getClientY();
					if (xcoord > minPixelXInPlot && xcoord < maxPixelXInPlot & ycoord > minPixelYInPlot && ycoord < maxPixelYInPlot) {
						dragging = true;
						startX = xcoord;
						startY = ycoord;
						lastX = startX;
						lastY = startY;
						selectionObj.setAttribute("x", startX);
						selectionObj.setAttribute("y", startY);
						selectionObj.setAttribute("width", 0);
						selectionObj.setAttribute("height", 0);
					}
				}
			}


			// Handle the dragging of the mouse across the plot
			function doDrag(evt) {
				if (dragging) {
					var xcoord = evt.getClientX();
					var ycoord = evt.getClientY();
					if (xcoord > minPixelXInPlot && xcoord < maxPixelXInPlot) {
						var xDiff = xcoord - lastX;
						if (xDiff < 0)
							xDiff = -xDiff;
						if (xDiff > 10) {
							lastX = xcoord;
							var width = xcoord - startX;
							if (xcoord >= startX)
								selectionObj.setAttribute("width", width);
							else {
								selectionObj.setAttribute("x", xcoord);
								selectionObj.setAttribute("width", -width);
							}
							setFormValues(startX, lastX, startY, lastY);
						}
					}
					if (ycoord > minPixelYInPlot && ycoord < maxPixelYInPlot) {
						var yDiff = ycoord - lastY;
						if (yDiff < 0)
							yDiff = -yDiff;
						if (yDiff > 10) {
							lastY = ycoord;
							var height = ycoord - startY;
							if (ycoord >= startY)
								selectionObj.setAttribute("height", height);
							else {
								selectionObj.setAttribute("y", ycoord);
								selectionObj.setAttribute("height", -height);
							}
							setFormValues(startX, lastX, startY, lastY);
						}
					}
				} else
					hideToolTip();
			}


			// Hide the range selection box
			function hideSelectBox() {
				selectionObj.setAttribute("x", 0);
				selectionObj.setAttribute("y", 0);
				selectionObj.setAttribute("width", 0);
				selectionObj.setAttribute("height", 0);
			}

			// Show a range selection box
			function setSelectBox(x1, x2, y1, y2) {
				var newX1 = toXPixelScale(x1);
				var newX2 = toXPixelScale(x2);
				var newY1 = toYPixelScale(y1);
				var newY2 = toYPixelScale(y2);
				selectionObj.setAttribute("x", newX1);
				selectionObj.setAttribute("y", newY2);
				var width = newX2 - newX1;
				var height =  newY1 - newY2;
				selectionObj.setAttribute("width", width);
				selectionObj.setAttribute("height", height);
			}
			
			// Show tooltip
			function showToolTip(evt, id) {
			
				if (! dragging) {
			
					// Determine tooltip coordinates
					var x = evt.getClientX();
					var y = evt.getClientY();
					var ttX = x + 5;
					var ttY = y - 5;
					
					// Set text node
					var txt = svgDoc.getElementById("toolTipText");
					var firstChild = txt.firstChild;
					if (firstChild != null)
						txt.removeChild(firstChild);
					txt.setAttribute("x", ttX);
					txt.setAttribute("y", ttY);
					txt.setAttribute("font-size", "10");
					txt.appendChild(svgDoc.createTextNode(id));
					txt.setAttribute("visibility", "visible");
					
					// Create bounding box
					var txtWidth = id.length * 6;
					var bbX = ttX - 5;
					var bbY = ttY - 15;
					var bbWidth = txtWidth + 10;
					var bbHeight = 20;
					var bb = svgDoc.getElementById("toolTipBox");
					bb.setAttribute("x", bbX);
					bb.setAttribute("y", bbY);
					bb.setAttribute("width", bbWidth);
					bb.setAttribute("height", bbHeight);
					bb.setAttribute("visibility", "visible");
                    bb.setAttribute("stroke", "black");
				}
			}
			
			// Hide tooltip
			function hideToolTip() {
				var txt = svgDoc.getElementById("toolTipText");
				txt.setAttribute("visibility", "hidden");
				var bb = svgDoc.getElementById("toolTipBox");
				bb.setAttribute("visibility", "hidden");
                bb.setAttribute("stroke", "yellow");
			}

		]]>
	</script>
	
	<!-- Insertion Point -->
	<g id="insertionPoint"/>
	
	<!-- Tool tip -->
	<rect height="1" width="1" id="toolTipBox" stroke="yellow" stroke-width="1" fill="yellow"/>
	<text id="toolTipText" font-size="10"/>
	
</svg>