<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20000303 Stylable//EN"
	"svg11-flat-20030114.dtd">
<svg id="svgNode" xmlns="http://www.w3.org/2000/svg-20000303-stylable" onload="init(evt);">

	<script id="declarations" type="text/ecmascript"/>

	<script type="text/ecmascript">
		<![CDATA[
			var highlightedData = new Array();
			var svgDoc;

			// Initialization function
			function init(evt) {
			
				// Make SVG functions visible to web page
				parent.highlight = highlight;
				parent.noHighlight = noHighlight;
				parent.setVisible = setVisible;
				parent.showErrorBars = showErrorBars;
				parent.showPoints = showPoints;
				parent.showLines = showLines;
				
				// Initialize variables
				svgDoc = evt.getTarget().getOwnerDocument();
				
				// Resize
				var rootElmt = svgDoc.getElementById("svgNode");
				var width = parseInt(rootElmt.getAttribute("width"));
				var height = parseInt(rootElmt.getAttribute("height"));
				parent.resizeImage(width, height);
			}

			// Highlight a data set
			function highlight(id) {
			
				// Un-highlight currently highlighted data set
				if (highlightedData != null)
					noHighlight();
					
				// Highlight data set
				var nodes = svgDoc.getElementsByTagName("g");
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes.item(i);
					var grpName = node.getAttribute("egrp");
					if (grpName != null) {
						if (grpName == id) {
							highlightedData.push(node);
							node.setAttribute("stroke-width", "3");
							promote(node);
						}
					}
				}
			}


			// Remove all highlighting
			function noHighlight() {
				for (var i = 0; i < highlightedData.length; i++) {
					var node = highlightedData[i];
					node.setAttribute("stroke-width", "1");
				}
				highlightedData = new Array();
			}
			
			
			// Move data set to front of plot
			function promote(elmt) {
				var parentElmt = elmt.parentNode;
				parentElmt.removeChild(elmt);
				parentElmt.appendChild(elmt);
			}


			// Make a data set visible or invisible
			function setVisible(id, visible) {
				var data = svgDoc.getElementById(id);
				var visibility = (visible)? "visible" : "hidden";
				data.setAttribute("visibility", visibility);
			}
			
			
			// Show element class
			function showElementClass(prefix, visible) {
				var visibility = (visible)? "visible" : "hidden";
				var nodeList = svgDoc.getElementsByTagName("g");
				for (var i = 0; i < nodeList.length; i++) {
					var element = nodeList.item(i);
					var grpClass = element.getAttribute("egrp");
					if (grpClass != null) {
						if (grpClass == prefix)
							element.setAttribute("visibility", visibility);
					}
				}
			}


			// Show error bars
			function showErrorBars(visible) {
				showElementClass("e", visible);
			}


			// Show data points
			function showPoints(visible) {
				showElementClass("p", visible);
			}
			
			// Show lines
			function showLines(visible) {
				showElementClass("l", visible);
			}


			// Show tooltip
			function showToolTip(evt, id) {
			
				// Determine tooltip coordinates
				var x = evt.getClientX();
				var y = evt.getClientY();
				var ttX = x + 5;
				var ttY = y - 5;
				
				// Set text node
				var txt = svgDoc.getElementById("toolTipText");
				var firstChild = txt.firstChild;
				if (firstChild != null)
					txt.removeChild(firstChild);
				txt.setAttribute("x", ttX);
				txt.setAttribute("y", ttY);
				txt.setAttribute("font-size", "10");
				txt.appendChild(svgDoc.createTextNode(id));
				txt.setAttribute("visibility", "visible");
				
				// Create bounding box
				var txtWidth = id.length * 6;
				var bbX = ttX - 5;
				var bbY = ttY - 15;
				var bbWidth = txtWidth + 10;
				var bbHeight = 20;
				var bb = svgDoc.getElementById("toolTipBox");
				bb.setAttribute("x", bbX);
				bb.setAttribute("y", bbY);
				bb.setAttribute("width", bbWidth);
				bb.setAttribute("height", bbHeight);
				bb.setAttribute("visibility", "visible");
			}
			
			// Hide tooltip
			function hideToolTip() {
				var txt = svgDoc.getElementById("toolTipText");
				txt.setAttribute("visibility", "hidden");
				var bb = svgDoc.getElementById("toolTipBox");
				bb.setAttribute("visibility", "hidden");
			}

		]]>
	</script>
	
	<!-- Insertion Point -->
	<g id="insertionPoint"/>
	
	<!-- Tool tip -->
	<rect id="toolTipBox" stroke="black" stroke-width="1" fill="yellow"/>
	<text id="toolTipText" font-size="10"/>
	
</svg>