<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20000303 Stylable//EN"
	"svg11-flat-20030114.dtd">
<svg id="svgNode" xmlns="http://www.w3.org/2000/svg-20000303-stylable" onload="init(evt);">

	<script id="declarations" type="text/ecmascript"/>

	<script type="text/ecmascript">
		<![CDATA[
		
			//
			// Global variables
			//
			var highlightedElements = new Array();
			var svgDoc;
			var showingErrorBars = true;
			var showingLines = true;
			var showingPoints = true;
			var colorIndex = new Array();


			//
			// Initialization function
			//
			function init(evt) {
			
				// Make SVG functions visible to web page
				parent.highlight = highlight;
				parent.noHighlight = noHighlight;
				parent.showErrorBars = showErrorBars;
				parent.showPoints = showPoints;
				parent.showLines = showLines;
				
				// Initialize variables
				svgDoc = evt.getTarget().getOwnerDocument();
				
				// Resize
				var rootElmt = svgDoc.getElementById("svgNode");
				var width = parseInt(rootElmt.getAttribute("width"));
				var height = parseInt(rootElmt.getAttribute("height"));
				parent.resizeImage(width, height);
			}


			// 
			// Highlight a bioassay.  Method searches
			// for elements where the attribute 'egrp'
			// is defined and equal to the bioAssayName.
			// It highlighted these elements.
			//
			function highlight(bioAssayName) {
			
				// Un-highlight currently highlighted bioassay
				if (highlightedElements != null)
					noHighlight();
					
				// Highlight lines, points, and, error bars.
				var nodes = svgDoc.getElementsByTagName("g");
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes.item(i);
					var grpName = node.getAttribute("egrp");
					if (grpName != null) {
						if (grpName == bioAssayName) {
							highlightedElements.push(node);
							node.setAttribute("stroke-width", "3");
							promote(node);
						}
					}
				}
				
				// Highlight legend text
				nodes = svgDoc.getElementsByTagName("text");
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes.item(i);
					var grpName = node.getAttribute("egrp");
					if (grpName != null) {
						if (grpName == bioAssayName) {
							highlightedElements.push(node);
							node.setAttribute("stroke-width", "3");
							promote(node);
						}
					}
				}
			}


			//
			// Remove all highlighting
			//
			function noHighlight() {
				for (var i = 0; i < highlightedElements.length; i++) {
					var node = highlightedElements[i];
					node.setAttribute("stroke-width", "1");
				}
				highlightedElements = new Array();
			}
			
			
			//
			// Toggle color of legend rectangle.  Also toggle visibility of
			// corresponding line.
			//
			function toggleColor(bioAssayId) {
				var visible = true;
			
				// Toggle rectangle
				var nodes = svgDoc.getElementsByTagName("rect");
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes.item(i);
					var grpName = node.getAttribute("egrp");
					if (grpName != null) {
						if (grpName == bioAssayId) {
							var fill = node.getAttribute("fill");
							if (fill == "white") {
								node.setAttribute("fill", colorIndex[bioAssayId]);
								visible = true;
							} else {
								colorIndex[bioAssayId] = fill;
								node.setAttribute("fill", "white");
								visible = false;
							}
						}
					} 
				}
				
				// Toggle text
				var nodes = svgDoc.getElementsByTagName("text");
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes.item(i);
					var grpName = node.getAttribute("egrp");
					if (grpName != null) {
						if (grpName == bioAssayId) {
							var stroke = node.getAttribute("stroke");
							if (visible)
								node.setAttribute("stroke", "black");
							else
								node.setAttribute("stroke", "gray");
						}
					} 
				}
				
				// Toggle line, points, and error bars
				var nodes = svgDoc.getElementsByTagName("g");
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes.item(i);
					var grpName = node.getAttribute("egrp");
					if (grpName != null) {
						if (grpName == bioAssayId) {
							node.setAttribute("visibility", visibilityAttributeValue(visible));
							var children = node.getElementsByTagName("g");
							if (children != null) {
								for (var j = 0; j < children.length; j++) {
									var child = children.item(j);
									var grpClass = child.getAttribute("egrp");
									var childVisible = visible && groupVisible(grpClass);
									child.setAttribute("visibility", visibilityAttributeValue(childVisible));
								}
							}
						}
					} 
				}
			}
			
			
			//
			// Get visibility attribute value
			//
			function visibilityAttributeValue(visible) {
				var value = (visible)? "visible" : "hidden";
				return value;
			}
			
			
			//
			// Is element group visible?
			//
			function groupVisible(grpClass) {
				var visible = true;
				if (grpClass == "e")
					visible = showingErrorBars;
				else if (grpClass == "p")
					visible = showingPoints;
				else if (grpClass == "l")
					visible = showingLines;
				return visible;
			}
			
			
			//
			// Move data set to front of plot
			//
			function promote(elmt) {
				var parentElmt = elmt.parentNode;
				parentElmt.removeChild(elmt);
				parentElmt.appendChild(elmt);
			}
			
			//
			// Show element class (i.e. error bars, lines, and points)
			//
			function showElementClass(prefix, visible) {
				var nodeList = svgDoc.getElementsByTagName("g");
				for (var i = 0; i < nodeList.length; i++) {
					var element = nodeList.item(i);
					var grpClass = element.getAttribute("egrp");
					if (grpClass != null) {
						if (grpClass == prefix) {
							var parentVisible = isVisible(element.parentNode);
							var visibility = visibilityAttributeValue(visible && parentVisible);
							element.setAttribute("visibility", visibility);
						}
					}
				}
			}
			
			
			//
			// Is element visible?
			//
			function isVisible(elmt) {
				var visible = true;
				if (elmt != null) {
					var attr = elmt.getAttribute("visibility");
					if (attr != null) {
						if (attr == "hidden")
							visible = false;
					}
				}
				return visible;
			}


			//
			// Show error bars
			//
			function showErrorBars(visible) {
				showingErrorBars = visible;
				showElementClass("e", visible);
			}


			//
			// Show data points
			//
			function showPoints(visible) {
				showingPoints = visible;
				showElementClass("p", visible);
			}
			
			//
			// Show lines
			//
			function showLines(visible) {
				showingLines = visible;
				showElementClass("l", visible);
			}

			//
			// Show tooltip
			//
			function showToolTip(evt, id) {
			
				// Determine tooltip coordinates
				var x = evt.getClientX();
				var y = evt.getClientY();
				var ttX = x + 5;
				var ttY = y - 5;
				
				// Set text node
				var txt = svgDoc.getElementById("toolTipText");
				var firstChild = txt.firstChild;
				if (firstChild != null)
					txt.removeChild(firstChild);
				txt.setAttribute("x", ttX);
				txt.setAttribute("y", ttY);
				txt.setAttribute("font-size", "10");
				txt.appendChild(svgDoc.createTextNode(id));
				txt.setAttribute("visibility", "visible");
				
				// Create bounding box
				var txtWidth = id.length * 6;
				var bbX = ttX - 5;
				var bbY = ttY - 15;
				var bbWidth = txtWidth + 10;
				var bbHeight = 20;
				var bb = svgDoc.getElementById("toolTipBox");
				bb.setAttribute("x", bbX);
				bb.setAttribute("y", bbY);
				bb.setAttribute("width", bbWidth);
				bb.setAttribute("height", bbHeight);
				bb.setAttribute("visibility", "visible");
			}
			
			//
			// Hide tooltip
			//
			function hideToolTip() {
				var txt = svgDoc.getElementById("toolTipText");
				txt.setAttribute("visibility", "hidden");
				var bb = svgDoc.getElementById("toolTipBox");
				bb.setAttribute("visibility", "hidden");
			}

		]]>
	</script>
	
	<!-- Insertion Point -->
	<g id="insertionPoint"/>
	
	<!-- Tool tip -->
	<rect id="toolTipBox" stroke="black" stroke-width="1" fill="yellow"/>
	<text id="toolTipText" font-size="10"/>
	
</svg>