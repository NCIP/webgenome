/*

$Source: /share/content/gforge/webcgh/webgenome/src/org/rti/webcgh/service/client/ClientDataServiceImpl.java,v $
$Revision: 1.1 $
$Date: 2006-09-07 18:54:53 $

The Web CGH Software License, Version 1.0

Copyright 2003 RTI. This software was developed in conjunction with the National 
Cancer Institute, and so to the extent government employees are co-authors, any 
rights in such works shall be subject to Title 17 of the United States Code, 
section 105.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this 
list of conditions and the disclaimer of Article 3, below. Redistributions in 
binary form must reproduce the above copyright notice, this list of conditions 
and the following disclaimer in the documentation and/or other materials 
provided with the distribution.

2. The end-user documentation included with the redistribution, if any, must 
include the following acknowledgment:

"This product includes software developed by the RTI and the National Cancer 
Institute."

If no such end-user documentation is to be included, this acknowledgment shall 
appear in the software itself, wherever such third-party acknowledgments 
normally appear.

3. The names "The National Cancer Institute", "NCI", 
“Research Triangle Institute”, and "RTI" must not be used to endorse or promote 
products derived from this software.

4. This license does not authorize the incorporation of this software into any 
proprietary programs. This license does not authorize the recipient to use any 
trademarks owned by either NCI or RTI.

5. THIS SOFTWARE IS PROVIDED "AS IS," AND ANY EXPRESSED OR IMPLIED WARRANTIES, 
(INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE) ARE DISCLAIMED. IN NO EVENT SHALL THE NATIONAL 
CANCER INSTITUTE, RTI, OR THEIR AFFILIATES BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

package org.rti.webcgh.service.client;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;


import org.apache.log4j.Logger;
import org.rti.webcgh.array.Experiment;
import org.rti.webcgh.array.GenomeIntervalDto;
import org.rti.webcgh.core.WebcghApplicationException;
import org.rti.webcgh.deprecated.DomainObjectFactory;
import org.rti.webcgh.service.util.ServiceLocator;
import org.rti.webgenome.client.BioAssayDataConstraints;
import org.rti.webgenome.client.BioAssayMgr;
import org.rti.webgenome.client.BioAssayMgrHome;
import org.rti.webgenome.client.ExperimentDTO;
import org.rti.webgenome.client.QuantitationTypes;

/**
 * Implementatation of ClientDataService interface
 *
 */
public class ClientDataServiceImpl implements ClientDataService {

	private static final Logger LOGGER = Logger.getLogger(ClientDataServiceImpl.class);
	private final int THREAD_POLLING_WAIT_COUNT_MSEC = 10;
	
//    private Hashtable environment = null;
    private String jndiName = "RBTBioAssayService";
    private boolean localClientEjbAccess = true;
    DomainObjectFactory factory = null;
    
    
	public void setJndiName(String jndiName) {
		this.jndiName = jndiName;
	}


	public boolean isLocalClientEjbAccess() {
		return localClientEjbAccess;
	}


	public void setLocalClientEjbAccess(boolean localClientEjbAccess) {
		this.localClientEjbAccess = localClientEjbAccess;
	}
	
	public void setFactory(DomainObjectFactory factory) {
		this.factory = factory;
	}


	/**
     * @param constraints array of BioAssayDataConstraints
     * @param experimentIDs String of comma-separated experiment names
     * @param clientID ID that is generated by the client to describe the experiment set
     * @throws Exception
     * @return Experiment[] returns an array of Experiments given query parameterss
     */
    public Experiment[] getClientData(BioAssayDataConstraints[] constraints,
            String[] experimentIds, String clientID) throws Exception {
    	
//    	LOGGER.info("Starting 'getClientData'");

        List experiments = Collections.synchronizedList(new ArrayList());
        DomainObjectFactory factory = new DomainObjectFactory();
        List threadExceptions = Collections.synchronizedList(new ArrayList());
        
        
       	//--------------
    	//   Inner class getClientDataThread to multi-thread getClientData method
    	//--------------
    	
        /**
         * purpose of this inner class is to create a thread that can independently
         * access the EJB and retrieve experiment DTOs from it
         */
    	class GetClientDataThread implements Runnable {
    		
    		String experimentID = null;
    		BioAssayDataConstraints constraint = null;
    		String clientID = null;
            List experimentResults = Collections.synchronizedList(new ArrayList());
            List threadExceptions = Collections.synchronizedList(new ArrayList());
            
            public GetClientDataThread(String experimentID, BioAssayDataConstraints constraint, String clientID, 
            		List experimentResults, List threadExceptions) {
            	this.experimentID = experimentID;
            	this.constraint = constraint;
            	this.clientID = clientID;
            	this.experimentResults = experimentResults;
            	this.threadExceptions = threadExceptions;
            }

			public void run() {
//				LOGGER.info("HELLOOOOOOO from Thread: [" + Thread.currentThread().getName() + "]");
				
				try {
					
				   	// locate EJB
					BioAssayMgr service = null;
			        ServiceLocator locator = ServiceLocator.getInstance();
			        Object h = null;
			        if (ClientDataServiceImpl.this.localClientEjbAccess)
			        	h = locator.getLocalHome(ClientDataServiceImpl.this.jndiName);
			        else
			        	h = locator.locateHome(null, ClientDataServiceImpl.this.jndiName, BioAssayMgrHome.class);
			        BioAssayMgrHome home = (BioAssayMgrHome)h;
			        service = home.create();
			        
			        // use EJB to get the ExperimentDTO
			        ExperimentDTO tempExpdto = service.getExperiment(experimentID, constraint, clientID);
			        
			        // map ExperimentDTO to Experiment, store it in array of Experiments for this experimentID
	                Experiment newexp = ClientDataServiceImpl.this.factory.getExperiment(tempExpdto, tempExpdto.getExperimentID());
	                newexp.setClientId(clientID);
	                experimentResults.add(newexp);
	                
				} catch (Exception e) {
					// save all exceptions, retrieve in outer class and throw them
					// (Threads cannot throw Exceptions directly)
					threadExceptions.add(e);
				}
		        
//	            LOGGER.info("Thread: [" + Thread.currentThread().getName() + "] -- ended.");
			}
    		
    	}
    	
    	//--------------
    	// End of inner class declaration
    	//--------------  

    	
        Collection clientDataThreads = new ArrayList();
        Hashtable experimentResultsHash = new Hashtable(); 
    	
        //iterate over every experiment
        for (int i = 0; i < experimentIds.length; i++) {
        	
            String expID = experimentIds[i];
        	List experimentResults = Collections.synchronizedList(new ArrayList());
        	experimentResultsHash.put(expID, experimentResults);
        	
        	//iterate over bioassay constraints
        	for (int j = 0; j < constraints.length; j++) {
            	
                BioAssayDataConstraints constraint = constraints[j];
                
                // call new thread to locate EJB, retrieve ExperimentDTO, and convert it to an Experiment
                Thread aThread = new Thread(new GetClientDataThread(expID, constraint, clientID, experimentResults, threadExceptions));
                clientDataThreads.add(aThread);
                aThread.start();
                
            }
        }
    	
        // Check if all of the threads are done.  If not, then continue to sleep & re-check
        boolean someThreadRunning = true;
        while (someThreadRunning) {
        	someThreadRunning = false;
        	Iterator iter = clientDataThreads.iterator();
        	while (iter.hasNext()) {
        		Thread aThread = (Thread) iter.next();
        		if (aThread.isAlive()) {
        			someThreadRunning = true;
        			break;
        		}
        	}
        	if (someThreadRunning)
        		Thread.sleep(THREAD_POLLING_WAIT_COUNT_MSEC);
        	else
        		break;
        }
        
        // throw any Exceptions generated in any of the threads
        if (threadExceptions.size() > 0) {
        	for (Iterator it = threadExceptions.iterator(); it.hasNext(); ) {
        		Exception e = (Exception) it.next();
        		throw e;
        	}
        }
        
		// merge all experiments of different constraints (that have same experiment ID) with each other
    	for (int i = 0; i < experimentIds.length; i++) {
        	Experiment exp = null;
    		List experimentResults = (List) experimentResultsHash.get(experimentIds[i]);
	    	if (experimentResults.size() > 0) {
	    		for (Iterator it = experimentResults.iterator(); it.hasNext(); ) {
	    			if (exp == null)
	    				exp = (Experiment) it.next();
	    			else {
	    				Experiment nextexp = (Experiment) it.next();
	    				exp.add(nextexp);
	    			}
	    		}
	    	}
	    	
	        // now that overall exp. object is fully constructed for given experiment ID, add it to return list
	        experiments.add(exp);
    	}
        
//        LOGGER.info(experiments.size() + " experiments with " + constraints.length + " constraints have been processed in total");
        
        Experiment[] expArray = new Experiment[0];
        expArray = (Experiment[]) experiments.toArray(expArray);
        
//        LOGGER.info("Ending 'getClientData'");
        
        return expArray;
    }
    
    
    /**
     * Refresh data in experiments
     * @param experiments Experiments
     * @param genomeIntervalDtos Genome interval DTOs
     * @return Experiments
     * @throws WebcghApplicationException
     */
    public Experiment[] refresh(Experiment[] experiments, GenomeIntervalDto[] genomeIntervalDtos) 
    		throws WebcghApplicationException, Exception {
        
        // Check params
        if (experiments == null)
            return null;
        if (experiments.length == 0)
            return experiments;
        if (genomeIntervalDtos == null)
            throw new WebcghApplicationException("No genome intervals specified");
        
        // Get client id
        String clientId = experiments[0].getClientId();
        
        // Get quantitation type
        Set qtypes = experiments[0].quantitationTypes();
        String qType = null;
        if (qtypes.size() < 1)
            qType = QuantitationTypes.COPY_NUMBER;
        else
        	qType = qtypes.iterator().next().toString();
        
        // Create list of experiment IDs
        String[] expIds = new String[experiments.length];
        for (int i = 0; i < expIds.length; i++)
            expIds[i] = experiments[i].getName();
        
        // Create list of data constraints
        BioAssayDataConstraints[] constraints = new BioAssayDataConstraints[genomeIntervalDtos.length];
        for (int i = 0; i < genomeIntervalDtos.length; i++) {
            BioAssayDataConstraints con = new BioAssayDataConstraints();
            constraints[i] = con;
            GenomeIntervalDto dto = genomeIntervalDtos[i];
            con.setChromosome(String.valueOf(dto.getChromosome()));
            con.setPositions(new Long((long)dto.getStart()), new Long((long)dto.getEnd()));
            con.setQuantitationType(qType);
        }
        
        return this.getClientData(constraints, expIds, clientId);
    }

}
